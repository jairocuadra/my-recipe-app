{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let ThemeService = /*#__PURE__*/(() => {\n  class ThemeService {\n    constructor() {\n      this.darkModeKey = 'darkMode';\n      this.darkModeSubject = new BehaviorSubject(this.getInitialDarkModeState());\n      this.darkMode$ = this.darkModeSubject.asObservable();\n      // Apply the initial theme\n      this.applyTheme(this.darkModeSubject.value);\n      // Listen for system preference changes\n      this.listenForSystemPreferenceChanges();\n    }\n    toggleDarkMode() {\n      const newValue = !this.darkModeSubject.value;\n      this.darkModeSubject.next(newValue);\n      localStorage.setItem(this.darkModeKey, JSON.stringify(newValue));\n      this.applyTheme(newValue);\n    }\n    getInitialDarkModeState() {\n      // Check if user has a saved preference\n      const savedPreference = localStorage.getItem(this.darkModeKey);\n      if (savedPreference !== null) {\n        return JSON.parse(savedPreference);\n      }\n      // Otherwise, use system preference\n      return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    }\n    listenForSystemPreferenceChanges() {\n      if (window.matchMedia) {\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n          // Only update if user hasn't set a preference\n          if (localStorage.getItem(this.darkModeKey) === null) {\n            this.darkModeSubject.next(e.matches);\n            this.applyTheme(e.matches);\n          }\n        });\n      }\n    }\n    applyTheme(isDark) {\n      // Apply to body for global styles\n      if (isDark) {\n        document.body.classList.add('dark-theme');\n        // Set a CSS variable to help with transitions\n        document.documentElement.style.setProperty('--is-dark-theme', '1');\n      } else {\n        document.body.classList.remove('dark-theme');\n        // Set a CSS variable to help with transitions\n        document.documentElement.style.setProperty('--is-dark-theme', '0');\n      }\n      // Update meta theme-color for mobile browsers\n      const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\n      if (metaThemeColor) {\n        metaThemeColor.setAttribute('content', isDark ? '#111827' : '#ffffff');\n      }\n    }\n    static {\n      this.ɵfac = function ThemeService_Factory(t) {\n        return new (t || ThemeService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ThemeService,\n        factory: ThemeService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ThemeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}